/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: goIsoEx.swigcxx

#define SWIGMODULE goIsoEx

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "IsoEx.h" 



#include <string>

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_goIsoEx_2f035b14d10877ca(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_goIsoEx_2f035b14d10877ca(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


intgo _wrap_MAX_ISO_DATA_goIsoEx_2f035b14d10877ca() {
  int result;
  intgo _swig_go_result;
  
  
  result = (1024*1);
  
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoTabEx_len_set_goIsoEx_2f035b14d10877ca(IsoTabEx *_swig_go_0, short _swig_go_1) {
  IsoTabEx *arg1 = (IsoTabEx *) 0 ;
  short arg2 ;
  
  arg1 = *(IsoTabEx **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->len = arg2;
  
}


short _wrap_IsoTabEx_len_get_goIsoEx_2f035b14d10877ca(IsoTabEx *_swig_go_0) {
  IsoTabEx *arg1 = (IsoTabEx *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(IsoTabEx **)&_swig_go_0; 
  
  result = (short) ((arg1)->len);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoTabEx_Xtype_set_goIsoEx_2f035b14d10877ca(IsoTabEx *_swig_go_0, char _swig_go_1) {
  IsoTabEx *arg1 = (IsoTabEx *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(IsoTabEx **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->Xtype = arg2;
  
}


char _wrap_IsoTabEx_Xtype_get_goIsoEx_2f035b14d10877ca(IsoTabEx *_swig_go_0) {
  IsoTabEx *arg1 = (IsoTabEx *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(IsoTabEx **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->Xtype);
  _swig_go_result = result; 
  return _swig_go_result;
}


IsoTabEx *_wrap_new_IsoTabEx_goIsoEx_2f035b14d10877ca() {
  IsoTabEx *result = 0 ;
  IsoTabEx *_swig_go_result;
  
  
  result = (IsoTabEx *)new IsoTabEx();
  *(IsoTabEx **)&_swig_go_result = (IsoTabEx *)result; 
  return _swig_go_result;
}


void _wrap_delete_IsoTabEx_goIsoEx_2f035b14d10877ca(IsoTabEx *_swig_go_0) {
  IsoTabEx *arg1 = (IsoTabEx *) 0 ;
  
  arg1 = *(IsoTabEx **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IsoField_bitf_set_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0, short _swig_go_1) {
  IsoField *arg1 = (IsoField *) 0 ;
  short arg2 ;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->bitf = arg2;
  
}


short _wrap_IsoField_bitf_get_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0) {
  IsoField *arg1 = (IsoField *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  
  result = (short) ((arg1)->bitf);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoField_len_set_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0, short _swig_go_1) {
  IsoField *arg1 = (IsoField *) 0 ;
  short arg2 ;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->len = arg2;
  
}


short _wrap_IsoField_len_get_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0) {
  IsoField *arg1 = (IsoField *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  
  result = (short) ((arg1)->len);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoField_off_set_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0, short _swig_go_1) {
  IsoField *arg1 = (IsoField *) 0 ;
  short arg2 ;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->off = arg2;
  
}


short _wrap_IsoField_off_get_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0) {
  IsoField *arg1 = (IsoField *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  
  result = (short) ((arg1)->off);
  _swig_go_result = result; 
  return _swig_go_result;
}


IsoField *_wrap_new_IsoField_goIsoEx_2f035b14d10877ca() {
  IsoField *result = 0 ;
  IsoField *_swig_go_result;
  
  
  result = (IsoField *)new IsoField();
  *(IsoField **)&_swig_go_result = (IsoField *)result; 
  return _swig_go_result;
}


void _wrap_delete_IsoField_goIsoEx_2f035b14d10877ca(IsoField *_swig_go_0) {
  IsoField *arg1 = (IsoField *) 0 ;
  
  arg1 = *(IsoField **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_IsoEx_dbuf_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, char *_swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  unsigned char *arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->dbuf;
    for (ii = 0; ii < (size_t)(1024*1); ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
}


char *_wrap_IsoEx_dbuf_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  unsigned char *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (unsigned char *)(unsigned char *) ((arg1)->dbuf);
  *(unsigned char **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoEx_off_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, short _swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  short arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  if (arg1) (arg1)->off = arg2;
  
}


short _wrap_IsoEx_off_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (short) ((arg1)->off);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoEx_msgtype_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, intgo _swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->msgtype = arg2;
  
}


intgo _wrap_IsoEx_msgtype_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (int) ((arg1)->msgtype);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoEx_bittype_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, intgo _swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->bittype = arg2;
  
}


intgo _wrap_IsoEx_bittype_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (int) ((arg1)->bittype);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoEx_vartype_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, intgo _swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->vartype = arg2;
  
}


intgo _wrap_IsoEx_vartype_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (int) ((arg1)->vartype);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoEx_msgid_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, _gostring_ _swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  char *arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->msgid, (const char *)arg2, 5-1);
      arg1->msgid[5-1] = 0;
    } else {
      arg1->msgid[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_IsoEx_msgid_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->msgid);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_IsoEx_f_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, IsoField *_swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  IsoField *arg2 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = *(IsoField **)&_swig_go_1; 
  
  {
    size_t ii;
    IsoField *b = (IsoField *) arg1->f;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((IsoField *) arg2 + ii);
  }
  
}


IsoField (*_wrap_IsoEx_f_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0))[128] {
  IsoEx *arg1 = (IsoEx *) 0 ;
  IsoField *result = 0 ;
  IsoField (*_swig_go_result)[128];
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (IsoField *)(IsoField *) ((arg1)->f);
  *(IsoField **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_IsoEx_deftab_set_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, IsoTabEx *_swig_go_1) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  IsoTabEx *arg2 = (IsoTabEx *) 0 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = *(IsoTabEx **)&_swig_go_1; 
  
  if (arg1) (arg1)->deftab = arg2;
  
}


IsoTabEx *_wrap_IsoEx_deftab_get_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  IsoTabEx *result = 0 ;
  IsoTabEx *_swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  result = (IsoTabEx *) ((arg1)->deftab);
  *(IsoTabEx **)&_swig_go_result = (IsoTabEx *)result; 
  return _swig_go_result;
}


IsoEx *_wrap_new_IsoEx_goIsoEx_2f035b14d10877ca() {
  IsoEx *result = 0 ;
  IsoEx *_swig_go_result;
  
  
  result = (IsoEx *)new IsoEx();
  *(IsoEx **)&_swig_go_result = (IsoEx *)result; 
  return _swig_go_result;
}


void _wrap_delete_IsoEx_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_EBcd2Asc_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  EBcd2Asc(arg1,arg2,arg3);
  
  free(arg1); 
  free(arg2); 
}


void _wrap_Asc2EBcd_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  Asc2EBcd(arg1,arg2,arg3);
  
  free(arg1); 
  free(arg2); 
}


void _wrap_AtoE_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (int)_swig_go_1; 
  
  AtoE(arg1,arg2);
  
  free(arg1); 
}


void _wrap_EtoA_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (int)_swig_go_1; 
  
  EtoA(arg1,arg2);
  
  free(arg1); 
}


void _wrap_Asc2Bcd_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(unsigned char **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  Asc2Bcd(arg1,arg2,arg3,arg4);
  
}


void _wrap_Bcd2Asc_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(unsigned char **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  Bcd2Asc(arg1,arg2,arg3,arg4);
  
}


intgo _wrap_InitIsoEx_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, IsoTabEx *_swig_go_4) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  IsoTabEx *arg5 = (IsoTabEx *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = *(IsoTabEx **)&_swig_go_4; 
  
  result = (int)InitIsoEx(arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Str2IsoEx_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)Str2IsoEx(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Iso2StrEx_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)Iso2StrEx(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SetBitEx_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (int)_swig_go_3; 
  
  result = (int)SetBitEx(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_GetBitEx_goIsoEx_2f035b14d10877ca(IsoEx *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  IsoEx *arg1 = (IsoEx *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(IsoEx **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (int)_swig_go_3; 
  
  result = (int)GetBitEx(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_ExportIso_goIsoEx_2f035b14d10877ca(_gostring_ _swig_go_0, IsoTabEx *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  IsoTabEx *arg2 = (IsoTabEx *) 0 ;
  int result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = *(IsoTabEx **)&_swig_go_1; 
  
  result = (int)ExportIso(arg1,arg2);
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

 
  //printf("Initialization bank.goIsoEx done.\n");

